//Commands are case sensitive

#include <stdio.h>
#include <stdlib.h> //for getenv()
#include <unistd.h>

void clearSpace() {
  int ch;
  while((ch = getchar()) == ' ');
  ungetc(ch, stdin);
}

void clear (void)
{ 
  while ( getchar() != '\n' );
}

void printEnvList(char ** envp) {
  char ** env;
  for(env = envp; *env != NULL; env++) {
    printf("%s\n", *env);
  }
}

void dumpInput() {
  int ch;
  clearSpace();
  while((ch = getchar())!= '\n') {
    if(ch == ' ') {
      clearSpace();
      printf(" ");
    }
    else
      printf("%c", ch);
  }
  printf("\n");
}



int main(int argc, char * argv[], char * envp[]) {
  char s[100]; //Maximum assumed length of any command word
  int ch;
  char * temp;
  while(1) {
    scanf("%s", s);
    if(strcmp(s, "clr") == 0) {
      clear();
      printf("\033[2J\033[1;1H");
      /* The first one (\033[2J) clears the entire screen (J) from top to bottom (2). The second code (\033[1;1H) positions the cursor at row 1, column 1.*/
    }

    else if(strcmp(s, "HOME") == 0) {
      printf("%s\n", getenv(s));
    }

    else if(strcmp(s, "environ") == 0 ) {
      printEnvList(envp);
    }

    else if(strcmp(s, "echo") == 0) {
      dumpInput();
    }

    else if(strcmp(s, "quit") == 0) {
      exit(0);
    }

    else if(strcmp(s, "cd") == 0) {
      clearSpace();
      if((ch = getchar()) == '\n')
	continue;
      else ungetc(ch, stdin);
      scanf("%s", s);
      printf("Result: %d\n", chdir(s));
      printf("Current working directory: %s\n", getcwd(temp, 100));
    }
  }
  return 0;
}
